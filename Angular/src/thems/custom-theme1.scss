
// Custom Theming for Angular Material
@use '@angular/material' as mat;
// For more information: https://material.angular.io/guide/theming
@import '@angular/material/theming';
// Plus imports for other components in your app.
// @import '~@coreui/c';
// @import '../../node_modules/@angular/material/theming';
// @import '../../node_modules/primeng/resources/themes/nova-accent/theme.css';

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
// TODO(v15): As of v15 mat.legacy-core no longer includes default typography styles.
//  The following line adds:
//    1. Default typography styles for all components
//    2. Styles for typography hierarchy classes (e.g. .mat-headline-1)
//  If you specify typography styles for the components you use elsewhere, you should delete this line.
//  If you don't need the default component typographies but still want the hierarchy styles,
//  you can delete this line and instead use:
//    `@include mat.legacy-typography-hierarchy(mat.define-legacy-typography-config());`
@include mat.all-legacy-component-typographies();
@include mat.legacy-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$angular8-primary: mat.define-palette(mat.$indigo-palette);
$angular8-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

// The warn palette is optional (defaults to red).
$angular8-warn: mat.define-palette(mat.$red-palette);

// Create the theme object (a Sass map containing all of the palettes).
$angular8-theme: mat.define-light-theme($angular8-primary, $angular8-accent, $angular8-warn);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-legacy-component-themes($angular8-theme);







.navbar{
background-color: #20a8d8;
// background-color: red;
}
.footer{
    background-color: #20a8d8;   
}


$themes: (
    first: (
        name: 'first',
        primary:  #20a8d8,
        secondary: #7A8288,
       
    ),
    second: (
        name: 'second',
        primary: #06ba00,
        secondary: #eee,
        
    ),
    third: (
        name: 'third',
        primary: #ba0082,
        secondary: #eee,
       
    ),
);

/*
* Implementation of themes
*/
@mixin themify($themes) {
    @each $theme, $map in $themes {
        .theme-#{$theme} & {
        $theme-map: () !global;
        @each $key, $submap in $map {
            $value: map-get(map-get($themes, $theme), '#{$key}');
            $theme-map: map-merge($theme-map, ($key: $value)) !global;
        }
        @content;
        $theme-map: null !global;
        }
    }
}

@function themed($key) {
    @return map-get($theme-map, $key);
}

* {
    @include themify($themes) {
        // custom theme to your needs. Add here
        @if themed('name') == 'first' {

            .navbar{
                background-color:  #20a8d8,
                // background-color: red;
                }

        }
        @if themed('name') == 'second' {

            .navbar{
                background-color: #06ba00;
                // background-color: red;
                }
                .footer{
                    background-color: #06ba00;   
                }
                .dropdown-item{
                    font-style:oblique;
                }
                .nav-link{
                    font-style:oblique;
                }
                .text{
                    font-style: oblique;
                }

        }
        @if themed('name') == 'third' {

            .navbar{
                background-color: #ba0082;
                // background-color: red;
                }

        }
    }
}