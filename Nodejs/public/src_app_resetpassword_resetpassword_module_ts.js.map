{"version":3,"file":"src_app_resetpassword_resetpassword_module_ts.js","mappings":"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","sources":["./src/app/resetpassword/fogotpwd/fogotpwd.component.ts","./src/app/resetpassword/fogotpwd/fogotpwd.component.html","./src/app/resetpassword/resetpassword.module.ts","./src/app/resetpassword/resetpwd/resetpwd.component.ts","./src/app/resetpassword/resetpwd/resetpwd.component.html","./src/app/resetpassword/resetpwdrouter/resetpwdrouter.module.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { LoginandregistrationService } from '../../services/loginandregistration.service'\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-fogotpwd',\n  templateUrl: './fogotpwd.component.html',\n  styleUrls: ['./fogotpwd.component.css']\n})\nexport class FogotpwdComponent implements OnInit {\n  serverErrorMessagesEmail: string;\n  successMessage: String;\n  view: boolean = true;\n\n  response;\n  private sub: Subscription;\n  timer: boolean;\n  errorMsg: boolean;\n  success: boolean;\n  timeLeft: number;\n  interval;\n  constructor(private service: LoginandregistrationService,\n    private formBuilder: FormBuilder,\n    private _router: Router,\n    private _activatedRoute: ActivatedRoute) { }\n\n  ForgotForm: FormGroup;\n  ngOnInit() {\n    this.ForgotForm = this.formBuilder.group({\n      email: ['', [Validators.required]],\n      otp: ['', [Validators.required]],\n    })\n\n  }\n\n \n\n  forGotPwd() {\n    this.errorMsg = false;\n    this.timer = false;\n    this.success=false;\n    this.service.forGotPwd(this.ForgotForm.value).subscribe(\n      res => {\n        // this._router.navigateByUrl('/reset')\n        this.view = false;\n        this.timer = true;\n        // clearInterval(this.interval);\n        // startInter(this.interval);\n        this.timeCountDown();\n      },\n      error => {\n        this.errorMsg = true;\n        this.serverErrorMessagesEmail = error.message;\n      }\n    )\n  }\n  valdateotp() {\n    this.success = false;\n    this.errorMsg = false;\n    const OTP = this.ForgotForm.value.otp;\n    let data = {\n      otp: OTP,\n    }\n    this.service.valiDateOtp(data).subscribe(\n      res => {\n        this.response = res;\n        this.successMessage = this.response.message;\n        if (this.successMessage == \"Please loging your mail and set new password\") {\n          this._router.navigateByUrl('/forgotpwd/reset/'+this.response.jwttoken);\n          this.timer=false;\n          this.success = true;\n        }\n        else {\n          this.errorMsg = true;\n        }\n      },\n      err => {\n        console.log(err)\n      }\n    )\n  }\n\n  timeCountDown() {\n    this.timeLeft = 60;\n    clearInterval(this.interval);\n    this.interval=setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        this.timeLeft = 0;\n      }\n    }, 1000)\n    \n  }\n  \n\n  \n\n}\n","<!-- <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css\"> -->\n<div class=\"form-gap\">\n    <div class=\"container \" >\n        <div class=\"row\"  style=\"padding-left: 20%;\">\n            <div class=\"col-md-6 col-md-offset-6\"  >\n                <div class=\"panel panel-default\" >\n                    <div class=\"panel-body\">\n                        <div class=\"text-center\" *ngIf=\"view\">\n                            <h3><i class=\"fa fa-lock fa-4x\"></i></h3>\n                            <h2 class=\"text-center\">Forgot Password?</h2>\n                            <p>You can reset your password here.</p>\n                            <div class=\"panel-body\">\n\n                                <form [formGroup]=\"ForgotForm\" class=\"form\">\n                                    <div class=\"form-group\">\n                                        <div class=\"input-group\">\n                                            <span class=\"input-group-addon\"><i\n                                                    class=\"glyphicon glyphicon-envelope color-blue\"></i></span>\n                                            <input name=\"email\" placeholder=\"Enter Email Address\" class=\"form-control\"\n                                                type=\"email\" formControlName=\"email\" required>\n                                        </div>\n                                    </div>\n                                    <div class=\"error\" *ngIf=\"errorMsg\">\n                                        {{serverErrorMessagesEmail}}\n                                    </div>\n                                    <div class=\"form-group\">\n                                        <input type=\"button\" name=\"recover-submit\"\n                                            class=\"btn btn-lg btn-primary btn-block\" value=\"Reset Password\"\n                                            (click)=\"forGotPwd()\">\n                                    </div>\n                                </form><br />\n                                <span class=\"psw\">Create An Account <a routerLink=\"/register\">sinup</a></span>\n                            </div>\n                        </div>\n\n                        <div  class=\"text-center\" *ngIf=\"!view\">\n                            <h3><i class=\"fa fa-lock fa-4x\"></i></h3>\n                            <h2 class=\"text-center\">Forgot Password?</h2>\n                            <p>Please check your mail and sbmit otp.</p>\n                            <div class=\"panel-body\">\n\n                                <form [formGroup]=\"ForgotForm\" class=\"form\">\n                                    <div class=\"form-group\">\n                                        <div class=\"input-group\">\n                                            <span class=\"input-group-addon\"><i\n                                                    class=\"glyphicon glyphicon-envelope color-blue\"></i></span>\n                                            <input name=\"email\" placeholder=\"Enter One Time Password\" class=\"form-control\"\n                                                type=\"email\" formControlName=\"otp\" required>\n                                        </div>\n                                    </div>\n                                    <div class=\"form-group\">\n                                        <input type=\"button\" name=\"recover-submit\"\n                                            class=\"btn btn-lg btn-primary btn-block\" value=\"Submit Otp\"\n                                            (click)=\"valdateotp()\" >\n                                    </div>\n                                    <div class=\"error\" *ngIf=\"errorMsg\">\n                                        {{successMessage}} \n                                    </div>\n                                    <div class=\"error\" *ngIf=\"timer\">\n                                        <P >Time:{{timeLeft}}</P>\n                                    </div>\n                                    <div class=\"success\" *ngIf=\"success\">\n                                        {{successMessage}} <a href=\"https://mail.google.com\" target=\"_blank\">Login</a>\n                                    </div>\n                                    <br/>\n                                    <span class=\"psw\">Resend OTP: <a (click)=\"forGotPwd()\" style=\"color: blue;cursor: pointer;\">Click</a></span>\n                                </form><br />\n                                <span class=\"psw\">Create An Account <a routerLink=\"/register\">sinup</a></span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ResetpwdComponent } from './resetpwd/resetpwd.component';\n\nimport {SharedModule} from '../shared/shared.module';\nimport{ResetpwdrouterModule} from './resetpwdrouter/resetpwdrouter.module';\nimport { FogotpwdComponent } from './fogotpwd/fogotpwd.component'\n\n@NgModule({\n  declarations: [ResetpwdComponent, FogotpwdComponent],\n  imports: [\n    CommonModule,\n    ResetpwdrouterModule,\n    SharedModule\n  ]\n})\nexport class ResetpasswordModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { LoginandregistrationService } from '../../services/loginandregistration.service'\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-resetpwd',\n  templateUrl: './resetpwd.component.html',\n  styleUrls: ['./resetpwd.component.css']\n})\nexport class ResetpwdComponent implements OnInit {\n  jwttoken;\n\n  serverErrorMessagesEmail: string;\n  constructor(private service: LoginandregistrationService,\n    private formBuilder: FormBuilder,\n    private _router: Router,\n    private _activatedRoute: ActivatedRoute) { }\n\n  ResetForm: FormGroup;\n\n  public token = \"\";\n\n  ngOnInit() {\n    this.tokenTime();\n    this.ResetForm = this.formBuilder.group({\n      password: ['', [Validators.required]],\n      confirmpassword: ['', [Validators.required]],\n    })\n  }\n\n  tokenTime() {\n    this.service.tokenTimeVerify().subscribe(\n      res => {\n        this.jwttoken = res;\n        if (this.jwttoken.message == \"token expires\") {\n          this._router.navigateByUrl('/');\n        }\n        else {\n          this.token = this._activatedRoute.snapshot.paramMap.get(\"token\")\n          this._router.navigateByUrl('/forgotpwd/reset/' + this.token);\n\n        }\n      }\n    )\n  }\n\n  resetPwd() {\n    console.log(\"token\", this.token);\n    this.service.resetPwd(this.ResetForm.value, this.token).subscribe(\n      res => {\n        this._router.navigateByUrl(\"\");\n      },\n      error => {\n        console.log(error)\n        this.serverErrorMessagesEmail = error.message;\n      }\n    )\n  }\n}\n","<!-- <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css\"> -->\n<div class=\"form-gap\"></div>\n<div class=\"container\">\n    <div class=\"row\" style=\"padding-left: 20%;\">\n        <div class=\"col-md-6 col-md-offset-6\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <div class=\"text-center\">\n                        <h3><i class=\"fa fa-lock fa-4x\"></i></h3>\n                        <h2 class=\"text-center\">Reset - Password?</h2>\n                        <p>You can reset your password here.</p>\n                        <div class=\"panel-body\">\n\n                            <form [formGroup]=\"ResetForm\" class=\"form\">\n                                <div class=\"form-group\">\n                                    <div class=\"input-group\">\n                                        <span class=\"input-group-addon\"><i\n                                                class=\"glyphicon glyphicon-envelope color-blue\"></i></span>\n                                        <input name=\"password\" placeholder=\"New-Password \" class=\"form-control\"\n                                            type=\"password\" formControlName=\"password\" required>\n                                    </div>\n                                </div>\n                                <div class=\"form-group\">\n                                    <div class=\"input-group\">\n                                        <span class=\"input-group-addon\"><i\n                                                class=\"glyphicon glyphicon-envelope color-blue\"></i></span>\n                                        <input name=\"confirmpassword\" placeholder=\"confirmpassword \"\n                                            class=\"form-control\" type=\"confirmpassword\"\n                                            formControlName=\"confirmpassword\" required>\n                                    </div>\n                                </div>\n                                <div class=\"error\" *ngIf=\"serverErrorMessagesEmail\">\n                                    {{serverErrorMessagesEmail}}\n                                </div>\n                                <div class=\"form-group\">\n                                    <input type=\"button\" name=\"recover-submit\" class=\"btn btn-lg btn-primary btn-block\"\n                                        value=\"Reset Password\" (click)=\"resetPwd()\">\n                                </div>\n                            </form>\n                            <span class=\"psw\">Re-Generate <a href=\"/forgotpwd\">Token</a></span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ResetpwdComponent } from '../resetpwd/resetpwd.component';\nimport { FogotpwdComponent } from '../fogotpwd/fogotpwd.component'\n\n\nconst routes: Routes = [\n  {path:'',component:FogotpwdComponent}, \n  {path:'reset/:token',component:ResetpwdComponent}  \n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ResetpwdrouterModule { }\n"],"names":[],"sourceRoot":"webpack:///"}